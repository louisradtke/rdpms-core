/* tslint:disable */
/* eslint-disable */
/**
 * RDPMS API v1
 * RDPMS API v1
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorMessageDTO,
  FileCreateRequestDTO,
  FileCreateResponseDTO,
  FileSummaryDTO,
  ProblemDetails,
} from '../models/index';
import {
    ErrorMessageDTOFromJSON,
    ErrorMessageDTOToJSON,
    FileCreateRequestDTOFromJSON,
    FileCreateRequestDTOToJSON,
    FileCreateResponseDTOFromJSON,
    FileCreateResponseDTOToJSON,
    FileSummaryDTOFromJSON,
    FileSummaryDTOToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface ApiV1DataFileRefsGetRequest {
    storeGuid?: string;
    type?: string;
}

export interface ApiV1DataFilesIdBlobGetRequest {
    id: string;
}

export interface ApiV1DataFilesIdContentGetRequest {
    id: string;
}

export interface ApiV1DataFilesIdGetRequest {
    id: string;
}

export interface ApiV1DataFilesPostRequest {
    fileCreateRequestDTO?: FileCreateRequestDTO;
}

/**
 * 
 */
export class FilesApi extends runtime.BaseAPI {

    /**
     */
    async apiV1DataFileRefsGetRaw(requestParameters: ApiV1DataFileRefsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileSummaryDTO>> {
        const queryParameters: any = {};

        if (requestParameters['storeGuid'] != null) {
            queryParameters['storeGuid'] = requestParameters['storeGuid'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/data/file-refs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileSummaryDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiV1DataFileRefsGet(requestParameters: ApiV1DataFileRefsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileSummaryDTO> {
        const response = await this.apiV1DataFileRefsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get summaries of all files.
     */
    async apiV1DataFilesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FileSummaryDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/data/files`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FileSummaryDTOFromJSON));
    }

    /**
     * Get summaries of all files.
     */
    async apiV1DataFilesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FileSummaryDTO>> {
        const response = await this.apiV1DataFilesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Request a download of a file. Not all files are available for download. On success, the raw bytes will be returned.
     */
    async apiV1DataFilesIdBlobGetRaw(requestParameters: ApiV1DataFilesIdBlobGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1DataFilesIdBlobGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/data/files/{id}/blob`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Request a download of a file. Not all files are available for download. On success, the raw bytes will be returned.
     */
    async apiV1DataFilesIdBlobGet(requestParameters: ApiV1DataFilesIdBlobGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.apiV1DataFilesIdBlobGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request redirect to a file. On success, a 302 referring to the final download URL will be returned.
     */
    async apiV1DataFilesIdContentGetRaw(requestParameters: ApiV1DataFilesIdContentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1DataFilesIdContentGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/data/files/{id}/content`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request redirect to a file. On success, a 302 referring to the final download URL will be returned.
     */
    async apiV1DataFilesIdContentGet(requestParameters: ApiV1DataFilesIdContentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1DataFilesIdContentGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get summary of a single file.
     */
    async apiV1DataFilesIdGetRaw(requestParameters: ApiV1DataFilesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileSummaryDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1DataFilesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/data/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileSummaryDTOFromJSON(jsonValue));
    }

    /**
     * Get summary of a single file.
     */
    async apiV1DataFilesIdGet(requestParameters: ApiV1DataFilesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileSummaryDTO> {
        const response = await this.apiV1DataFilesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request an upload for a new file.
     */
    async apiV1DataFilesPostRaw(requestParameters: ApiV1DataFilesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileCreateResponseDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/data/files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileCreateRequestDTOToJSON(requestParameters['fileCreateRequestDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileCreateResponseDTOFromJSON(jsonValue));
    }

    /**
     * Request an upload for a new file.
     */
    async apiV1DataFilesPost(requestParameters: ApiV1DataFilesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileCreateResponseDTO> {
        const response = await this.apiV1DataFilesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
