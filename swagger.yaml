openapi: 3.0.4
info:
  title: RDPMS API v1
  description: RDPMS API v1
  version: v1
paths:
  /api/v1/data/collections:
    get:
      tags:
        - Collections
      summary: Get all collections.
      parameters:
        - name: projectId
          in: query
          description: Used to filter for collections with this parent project
          schema:
            type: string
            format: uuid
        - name: projectSlug
          in: query
          description: Used to filter for collections with this parent project
          schema:
            type: string
        - name: slug
          in: query
          description: Used to filter for collections with this slug
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionSummaryDTO'
    post:
      tags:
        - Collections
      summary: Add a single item to the system.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionSummaryDTO'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/data/collections/{id}':
    get:
      tags:
        - Collections
      summary: Get a single collection by id.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionSummaryDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/data/content-types:
    get:
      tags:
        - ContentTypes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContentTypeDTO'
    post:
      tags:
        - ContentTypes
      summary: Add a single content type to the system.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentTypeDTO'
      responses:
        '200':
          description: OK
  /api/v1/data/content-types/batch:
    post:
      tags:
        - ContentTypes
      summary: Add a batch of content types to the system.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ContentTypeDTO'
      responses:
        '200':
          description: OK
  '/api/v1/data/content-types/{id}':
    get:
      tags:
        - ContentTypes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentTypeDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/data/datasets:
    get:
      tags:
        - DataSets
      parameters:
        - name: collectionId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataSetSummaryDTO'
    post:
      tags:
        - DataSets
      summary: Add a single item to the system.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSetSummaryDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/data/datasets/{id}':
    get:
      tags:
        - DataSets
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSetDetailedDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/data/datasets/{id}/add/s3':
    post:
      tags:
        - DataSets
      summary: Add a single file to the system. Request a single S3 upload URL.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/S3FileCreateRequestDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileCreateResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileCreateResponseDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDTO'
  '/api/v1/data/datasets/{id}/seal':
    put:
      tags:
        - DataSets
      summary: Seals a data set. Only works for data sets that are in "Uninitialized" state.
      parameters:
        - name: id
          in: path
          description: The data set id.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDTO'
  /api/v1/data/datasets/batch:
    post:
      tags:
        - DataSets
      summary: Add a batch of item to the system.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DataSetSummaryDTO'
      responses:
        '200':
          description: OK
  /api/v1/data/files:
    get:
      tags:
        - Files
      summary: Get summaries of all files.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileSummaryDTO'
  '/api/v1/data/files/{id}':
    get:
      tags:
        - Files
      summary: Get summary of a single file.
      parameters:
        - name: id
          in: path
          description: Id of the file.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileSummaryDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/data/files/{id}/content':
    get:
      tags:
        - Files
      summary: "Request redirect to a file.\nOn success, a 302 referring to the final download URL will be returned."
      parameters:
        - name: id
          in: path
          description: Id of the file to download.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '302':
          description: Found
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDTO'
  '/api/v1/data/files/{id}/blob':
    get:
      tags:
        - Files
      summary: "Request a download of a file. Not all files are available for download.\nOn success, the raw bytes will be returned."
      parameters:
        - name: id
          in: path
          description: Id of the file to download.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDTO'
        '501':
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDTO'
  /api/v1/data/file-refs:
    get:
      tags:
        - Files
      parameters:
        - name: storeGuid
          in: query
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileSummaryDTO'
  /api/v1/projects:
    get:
      tags:
        - Projects
      summary: Get all projects.
      parameters:
        - name: slug
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectSummaryDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDTO'
  '/api/v1/projects/{id}':
    get:
      tags:
        - Projects
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSummaryDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDTO'
    put:
      tags:
        - Projects
      summary: Id field on the body is ignored.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectSummaryDTO'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageDTO'
  /api/v1/data/stores:
    get:
      tags:
        - Stores
      summary: Get all data stores.
      parameters:
        - name: type
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataStoreSummaryDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorMessageDTO'
  '/api/v1/data/stores/{id}':
    get:
      tags:
        - Stores
      summary: Get a single data store by id.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataStoreSummaryDTO'
components:
  schemas:
    CollectionSummaryDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        slug:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        dataSetCount:
          type: integer
          format: int32
          nullable: true
        defaultDataStoreId:
          type: string
          format: uuid
          nullable: true
        projectId:
          type: string
          format: uuid
          nullable: true
      additionalProperties: false
    ContentTypeDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        abbreviation:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        mimeType:
          type: string
          nullable: true
      additionalProperties: false
    DataSetDetailedDTO:
      type: object
      properties:
        id:
          type: string
          description: Uniquely identifies the dataset. Typically server-generated. Should not be manually set by the client.
          format: uuid
          nullable: true
        slug:
          type: string
          description: 'An optional, human-readable identifier for the dataset.'
          nullable: true
        name:
          type: string
          description: 'Non-unique, mandatory descriptive name of the dataset. Must be provided by the client.'
          nullable: true
        assignedTags:
          type: array
          items:
            $ref: '#/components/schemas/TagDTO'
          description: 'List of tags associated with the dataset, used for categorization and filtering purposes.'
          nullable: true
        createdStampUTC:
          type: string
          description: "UTC timestamp when the dataset was originally created.\nMandatory property, should be provided by the client."
          format: date-time
          nullable: true
        deletedStampUTC:
          type: string
          description: "UTC timestamp that indicates when the dataset was deleted.\nNull if the dataset has not been deleted yet."
          format: date-time
          nullable: true
        beginStampUTC:
          type: string
          description: "UTC timestamp that marks the period begin of the dataset.\nOnly to be set by server."
          format: date-time
          nullable: true
        endStampUTC:
          type: string
          description: "UTC timestamp that marks the period end of the dataset.\nOnly to be set by server."
          format: date-time
          nullable: true
        state:
          type: string
          description: "Indicates, whether the dataset (and its files) are immutable.\nOnly to be set by server.\nLifecycle is: Uninitialized -> [Sealed ->] Deleted"
          nullable: true
        isTimeSeries:
          type: boolean
          description: "Indicates if the dataset represents time-series data.\nOnly to be set by server."
          nullable: true
        isDeleted:
          type: boolean
          description: "Flags whether the dataset has been marked as deleted.\nOnly to be set by server."
          nullable: true
        metadataFields:
          type: array
          items:
            type: string
          description: "Fields, for which metadata exists.\nOnly to be set by server."
          nullable: true
        fileCount:
          type: integer
          description: Amount of files in the dataset.
          format: int32
        collectionId:
          type: string
          description: Id of the collection this dataset belongs to.
          format: uuid
          nullable: true
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileSummaryDTO'
          nullable: true
      additionalProperties: false
      description: "Represents a summary of a dataset, including identifying information, timestamps, state, tags,\nand metadata fields."
    DataSetSummaryDTO:
      type: object
      properties:
        id:
          type: string
          description: Uniquely identifies the dataset. Typically server-generated. Should not be manually set by the client.
          format: uuid
          nullable: true
        slug:
          type: string
          description: 'An optional, human-readable identifier for the dataset.'
          nullable: true
        name:
          type: string
          description: 'Non-unique, mandatory descriptive name of the dataset. Must be provided by the client.'
          nullable: true
        assignedTags:
          type: array
          items:
            $ref: '#/components/schemas/TagDTO'
          description: 'List of tags associated with the dataset, used for categorization and filtering purposes.'
          nullable: true
        createdStampUTC:
          type: string
          description: "UTC timestamp when the dataset was originally created.\nMandatory property, should be provided by the client."
          format: date-time
          nullable: true
        deletedStampUTC:
          type: string
          description: "UTC timestamp that indicates when the dataset was deleted.\nNull if the dataset has not been deleted yet."
          format: date-time
          nullable: true
        beginStampUTC:
          type: string
          description: "UTC timestamp that marks the period begin of the dataset.\nOnly to be set by server."
          format: date-time
          nullable: true
        endStampUTC:
          type: string
          description: "UTC timestamp that marks the period end of the dataset.\nOnly to be set by server."
          format: date-time
          nullable: true
        state:
          type: string
          description: "Indicates, whether the dataset (and its files) are immutable.\nOnly to be set by server.\nLifecycle is: Uninitialized -> [Sealed ->] Deleted"
          nullable: true
        isTimeSeries:
          type: boolean
          description: "Indicates if the dataset represents time-series data.\nOnly to be set by server."
          nullable: true
        isDeleted:
          type: boolean
          description: "Flags whether the dataset has been marked as deleted.\nOnly to be set by server."
          nullable: true
        metadataFields:
          type: array
          items:
            type: string
          description: "Fields, for which metadata exists.\nOnly to be set by server."
          nullable: true
        fileCount:
          type: integer
          description: Amount of files in the dataset.
          format: int32
        collectionId:
          type: string
          description: Id of the collection this dataset belongs to.
          format: uuid
          nullable: true
      additionalProperties: false
      description: "Represents a summary of a dataset, including identifying information, timestamps, state, tags,\nand metadata fields."
    DataStoreSummaryDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        slug:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        filesCount:
          type: integer
          format: int32
          nullable: true
        storageType:
          type: string
          nullable: true
        propertiesJson:
          type: string
          nullable: true
        projectId:
          type: string
          format: uuid
          nullable: true
      additionalProperties: false
    ErrorMessageDTO:
      type: object
      properties:
        message:
          type: string
          description: "The error message. This must be set. If the \"user friendly\" RDPMS.Core.Server.Model.DTO.V1.ErrorMessageDTO.DisplayMessage is set, this may\nbecome technical."
          nullable: true
        displayMessage:
          type: string
          description: 'A message dedicated to the user. If null, use RDPMS.Core.Server.Model.DTO.V1.ErrorMessageDTO.Message as fallback.'
          nullable: true
      additionalProperties: false
    FileCreateResponseDTO:
      type: object
      properties:
        uploadUri:
          type: string
          nullable: true
        fileId:
          type: string
          format: uuid
          nullable: true
      additionalProperties: false
    FileSummaryDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
        downloadURI:
          type: string
          nullable: true
        contentType:
          $ref: '#/components/schemas/ContentTypeDTO'
        size:
          type: integer
          format: int64
          nullable: true
        createdStampUTC:
          type: string
          format: date-time
          nullable: true
        deletedStampUTC:
          type: string
          format: date-time
          nullable: true
        beginStampUTC:
          type: string
          format: date-time
          nullable: true
        endStampUTC:
          type: string
          format: date-time
          nullable: true
        isTimeSeries:
          type: boolean
          nullable: true
        isDeleted:
          type: boolean
          nullable: true
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    ProjectSummaryDTO:
      type: object
      properties:
        id:
          type: string
          description: The id of this project.
          format: uuid
          nullable: true
        slug:
          type: string
          description: The slug of this project.
          nullable: true
        name:
          type: string
          description: The name of this project.
          nullable: true
        description:
          type: string
          nullable: true
        collections:
          type: array
          items:
            $ref: '#/components/schemas/CollectionSummaryDTO'
          description: All collections assigned to this project.
          nullable: true
        dataStores:
          type: array
          items:
            $ref: '#/components/schemas/DataStoreSummaryDTO'
          description: All data stores assigned to this project.
          nullable: true
      additionalProperties: false
    S3FileCreateRequestDTO:
      type: object
      properties:
        name:
          type: string
          nullable: true
        contentTypeId:
          type: string
          format: uuid
          nullable: true
        sizeBytes:
          type: integer
          format: int64
          nullable: true
        plainSHA256Hash:
          type: string
          nullable: true
        createdStamp:
          type: string
          format: date-time
          nullable: true
        beginStamp:
          type: string
          format: date-time
          nullable: true
        endStamp:
          type: string
          format: date-time
          nullable: true
        compressionAlgorithm:
          type: string
          nullable: true
        compressedSHA256Hash:
          type: string
          description: 'If file is compressed, this is the SHA256 hash of the compressed file.'
          nullable: true
        compressedSizeBytes:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    TagDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          nullable: true
      additionalProperties: false