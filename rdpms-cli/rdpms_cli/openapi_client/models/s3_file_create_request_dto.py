# coding: utf-8

"""
    RDPMS API v1

    RDPMS API v1

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class S3FileCreateRequestDTO(BaseModel):
    """
    S3FileCreateRequestDTO
    """ # noqa: E501
    name: Optional[StrictStr] = None
    content_type_id: Optional[StrictStr] = Field(default=None, alias="contentTypeId")
    size_bytes: Optional[StrictInt] = Field(default=None, alias="sizeBytes")
    plain_sha256_hash: Optional[StrictStr] = Field(default=None, alias="plainSHA256Hash")
    created_stamp: Optional[datetime] = Field(default=None, alias="createdStamp")
    begin_stamp: Optional[datetime] = Field(default=None, alias="beginStamp")
    end_stamp: Optional[datetime] = Field(default=None, alias="endStamp")
    compression_algorithm: Optional[StrictStr] = Field(default=None, alias="compressionAlgorithm")
    compressed_sha256_hash: Optional[StrictStr] = Field(default=None, description="If file is compressed, this is the SHA256 hash of the compressed file.", alias="compressedSHA256Hash")
    compressed_size_bytes: Optional[StrictInt] = Field(default=None, alias="compressedSizeBytes")
    __properties: ClassVar[List[str]] = ["name", "contentTypeId", "sizeBytes", "plainSHA256Hash", "createdStamp", "beginStamp", "endStamp", "compressionAlgorithm", "compressedSHA256Hash", "compressedSizeBytes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of S3FileCreateRequestDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if content_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.content_type_id is None and "content_type_id" in self.model_fields_set:
            _dict['contentTypeId'] = None

        # set to None if size_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.size_bytes is None and "size_bytes" in self.model_fields_set:
            _dict['sizeBytes'] = None

        # set to None if plain_sha256_hash (nullable) is None
        # and model_fields_set contains the field
        if self.plain_sha256_hash is None and "plain_sha256_hash" in self.model_fields_set:
            _dict['plainSHA256Hash'] = None

        # set to None if created_stamp (nullable) is None
        # and model_fields_set contains the field
        if self.created_stamp is None and "created_stamp" in self.model_fields_set:
            _dict['createdStamp'] = None

        # set to None if begin_stamp (nullable) is None
        # and model_fields_set contains the field
        if self.begin_stamp is None and "begin_stamp" in self.model_fields_set:
            _dict['beginStamp'] = None

        # set to None if end_stamp (nullable) is None
        # and model_fields_set contains the field
        if self.end_stamp is None and "end_stamp" in self.model_fields_set:
            _dict['endStamp'] = None

        # set to None if compression_algorithm (nullable) is None
        # and model_fields_set contains the field
        if self.compression_algorithm is None and "compression_algorithm" in self.model_fields_set:
            _dict['compressionAlgorithm'] = None

        # set to None if compressed_sha256_hash (nullable) is None
        # and model_fields_set contains the field
        if self.compressed_sha256_hash is None and "compressed_sha256_hash" in self.model_fields_set:
            _dict['compressedSHA256Hash'] = None

        # set to None if compressed_size_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.compressed_size_bytes is None and "compressed_size_bytes" in self.model_fields_set:
            _dict['compressedSizeBytes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of S3FileCreateRequestDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "contentTypeId": obj.get("contentTypeId"),
            "sizeBytes": obj.get("sizeBytes"),
            "plainSHA256Hash": obj.get("plainSHA256Hash"),
            "createdStamp": obj.get("createdStamp"),
            "beginStamp": obj.get("beginStamp"),
            "endStamp": obj.get("endStamp"),
            "compressionAlgorithm": obj.get("compressionAlgorithm"),
            "compressedSHA256Hash": obj.get("compressedSHA256Hash"),
            "compressedSizeBytes": obj.get("compressedSizeBytes")
        })
        return _obj


