# coding: utf-8

"""
    RDPMS API v1

    RDPMS API v1

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from rdpms_cli.openapi_client.models.tag_dto import TagDTO
from typing import Optional, Set
from typing_extensions import Self

class DataSetSummaryDTO(BaseModel):
    """
    Represents a summary of a dataset, including identifying information, timestamps, state, tags, and metadata fields.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Uniquely identifies the dataset. Typically server-generated. Should not be manually set by the client.")
    slug: Optional[StrictStr] = Field(default=None, description="An optional, human-readable identifier for the dataset.")
    name: Optional[StrictStr] = Field(default=None, description="Non-unique, mandatory descriptive name of the dataset. Must be provided by the client.")
    assigned_tags: Optional[List[TagDTO]] = Field(default=None, description="List of tags associated with the dataset, used for categorization and filtering purposes.", alias="assignedTags")
    created_stamp_utc: Optional[datetime] = Field(default=None, description="UTC timestamp when the dataset was originally created. Mandatory property, should be provided by the client.", alias="createdStampUTC")
    deleted_stamp_utc: Optional[datetime] = Field(default=None, description="UTC timestamp that indicates when the dataset was deleted. Null if the dataset has not been deleted yet.", alias="deletedStampUTC")
    begin_stamp_utc: Optional[datetime] = Field(default=None, description="UTC timestamp that marks the period begin of the dataset. Only to be set by server.", alias="beginStampUTC")
    end_stamp_utc: Optional[datetime] = Field(default=None, description="UTC timestamp that marks the period end of the dataset. Only to be set by server.", alias="endStampUTC")
    state: Optional[StrictStr] = Field(default=None, description="Indicates, whether the dataset (and its files) are immutable. Only to be set by server. Lifecycle is: Uninitialized -> [Sealed ->] Deleted")
    is_time_series: Optional[StrictBool] = Field(default=None, description="Indicates if the dataset represents time-series data. Only to be set by server.", alias="isTimeSeries")
    is_deleted: Optional[StrictBool] = Field(default=None, description="Flags whether the dataset has been marked as deleted. Only to be set by server.", alias="isDeleted")
    metadata_fields: Optional[List[StrictStr]] = Field(default=None, description="Fields, for which metadata exists. Only to be set by server.", alias="metadataFields")
    file_count: Optional[StrictInt] = Field(default=None, description="Amount of files in the dataset.", alias="fileCount")
    collection_id: Optional[StrictStr] = Field(default=None, description="Id of the collection this dataset belongs to.", alias="collectionId")
    __properties: ClassVar[List[str]] = ["id", "slug", "name", "assignedTags", "createdStampUTC", "deletedStampUTC", "beginStampUTC", "endStampUTC", "state", "isTimeSeries", "isDeleted", "metadataFields", "fileCount", "collectionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataSetSummaryDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assigned_tags (list)
        _items = []
        if self.assigned_tags:
            for _item in self.assigned_tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['assignedTags'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if slug (nullable) is None
        # and model_fields_set contains the field
        if self.slug is None and "slug" in self.model_fields_set:
            _dict['slug'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if assigned_tags (nullable) is None
        # and model_fields_set contains the field
        if self.assigned_tags is None and "assigned_tags" in self.model_fields_set:
            _dict['assignedTags'] = None

        # set to None if created_stamp_utc (nullable) is None
        # and model_fields_set contains the field
        if self.created_stamp_utc is None and "created_stamp_utc" in self.model_fields_set:
            _dict['createdStampUTC'] = None

        # set to None if deleted_stamp_utc (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_stamp_utc is None and "deleted_stamp_utc" in self.model_fields_set:
            _dict['deletedStampUTC'] = None

        # set to None if begin_stamp_utc (nullable) is None
        # and model_fields_set contains the field
        if self.begin_stamp_utc is None and "begin_stamp_utc" in self.model_fields_set:
            _dict['beginStampUTC'] = None

        # set to None if end_stamp_utc (nullable) is None
        # and model_fields_set contains the field
        if self.end_stamp_utc is None and "end_stamp_utc" in self.model_fields_set:
            _dict['endStampUTC'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if is_time_series (nullable) is None
        # and model_fields_set contains the field
        if self.is_time_series is None and "is_time_series" in self.model_fields_set:
            _dict['isTimeSeries'] = None

        # set to None if is_deleted (nullable) is None
        # and model_fields_set contains the field
        if self.is_deleted is None and "is_deleted" in self.model_fields_set:
            _dict['isDeleted'] = None

        # set to None if metadata_fields (nullable) is None
        # and model_fields_set contains the field
        if self.metadata_fields is None and "metadata_fields" in self.model_fields_set:
            _dict['metadataFields'] = None

        # set to None if collection_id (nullable) is None
        # and model_fields_set contains the field
        if self.collection_id is None and "collection_id" in self.model_fields_set:
            _dict['collectionId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataSetSummaryDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "slug": obj.get("slug"),
            "name": obj.get("name"),
            "assignedTags": [TagDTO.from_dict(_item) for _item in obj["assignedTags"]] if obj.get("assignedTags") is not None else None,
            "createdStampUTC": obj.get("createdStampUTC"),
            "deletedStampUTC": obj.get("deletedStampUTC"),
            "beginStampUTC": obj.get("beginStampUTC"),
            "endStampUTC": obj.get("endStampUTC"),
            "state": obj.get("state"),
            "isTimeSeries": obj.get("isTimeSeries"),
            "isDeleted": obj.get("isDeleted"),
            "metadataFields": obj.get("metadataFields"),
            "fileCount": obj.get("fileCount"),
            "collectionId": obj.get("collectionId")
        })
        return _obj


