# coding: utf-8

"""
    RDPMS API v1

    RDPMS API v1

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.collection_summary_dto import CollectionSummaryDTO
from openapi_client.models.data_store_summary_dto import DataStoreSummaryDTO
from typing import Optional, Set
from typing_extensions import Self

class ProjectSummaryDTO(BaseModel):
    """
    ProjectSummaryDTO
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The id of this project.")
    slug: Optional[StrictStr] = Field(default=None, description="The slug of this project.")
    name: Optional[StrictStr] = Field(default=None, description="The name of this project.")
    description: Optional[StrictStr] = None
    collections: Optional[List[CollectionSummaryDTO]] = Field(default=None, description="All collections assigned to this project.")
    data_stores: Optional[List[DataStoreSummaryDTO]] = Field(default=None, description="All data stores assigned to this project.", alias="dataStores")
    __properties: ClassVar[List[str]] = ["id", "slug", "name", "description", "collections", "dataStores"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectSummaryDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in collections (list)
        _items = []
        if self.collections:
            for _item in self.collections:
                if _item:
                    _items.append(_item.to_dict())
            _dict['collections'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_stores (list)
        _items = []
        if self.data_stores:
            for _item in self.data_stores:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dataStores'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if slug (nullable) is None
        # and model_fields_set contains the field
        if self.slug is None and "slug" in self.model_fields_set:
            _dict['slug'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if collections (nullable) is None
        # and model_fields_set contains the field
        if self.collections is None and "collections" in self.model_fields_set:
            _dict['collections'] = None

        # set to None if data_stores (nullable) is None
        # and model_fields_set contains the field
        if self.data_stores is None and "data_stores" in self.model_fields_set:
            _dict['dataStores'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectSummaryDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "slug": obj.get("slug"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "collections": [CollectionSummaryDTO.from_dict(_item) for _item in obj["collections"]] if obj.get("collections") is not None else None,
            "dataStores": [DataStoreSummaryDTO.from_dict(_item) for _item in obj["dataStores"]] if obj.get("dataStores") is not None else None
        })
        return _obj


