// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RDPMS.Core.Persistence;

#nullable disable

namespace RDPMS.Core.Persistence.Migrations
{
    [DbContext(typeof(RDPMSPersistenceContext))]
    partial class RDPMSPersistenceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("DataSetUsedForJobsRelation", b =>
                {
                    b.Property<Guid>("SourceDatasetsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SourceForJobsId")
                        .HasColumnType("TEXT");

                    b.HasKey("SourceDatasetsId", "SourceForJobsId");

                    b.HasIndex("SourceForJobsId");

                    b.ToTable("DataSetUsedForJobsRelation");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.ContentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MimeType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.DataCollectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DefaultDataStoreId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DefaultDataStoreId");

                    b.HasIndex("ParentId");

                    b.ToTable("DataCollections");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.DataFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BeginStamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedStamp")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DataSetId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DataStoreId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedStamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndStamp")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FileTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SHA256Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DataSetId");

                    b.HasIndex("DataStoreId");

                    b.HasIndex("FileTypeId");

                    b.ToTable("DataFiles");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.DataSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("AncestorDatasetIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreateJobId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedStamp")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DataCollectionEntityId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreateJobId");

                    b.HasIndex("DataCollectionEntityId");

                    b.ToTable("DataSets");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.DataSetUsedForJobsRelation", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SourceDatasetId")
                        .HasColumnType("TEXT");

                    b.HasKey("JobId", "SourceDatasetId");

                    b.ToTable("DataSetsUsedForJobs");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.DataStore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StorageType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("DataStores");

                    b.HasDiscriminator<int>("StorageType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.FileStorageReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Algorithm")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("DataFileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SHA256Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StorageType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DataFileId");

                    b.ToTable("FileStorageReferences");

                    b.HasDiscriminator<int>("StorageType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedStamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdateStamp")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("LocalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OutputCollectionEntityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OutputDataStoreId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PipelineInstanceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartedStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("TerminatedStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocalId");

                    b.HasIndex("OutputCollectionEntityId");

                    b.HasIndex("OutputDataStoreId");

                    b.HasIndex("PipelineInstanceId");

                    b.HasIndex("State");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParentProjectId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentProjectId");

                    b.ToTable("Label");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.LabelSharingPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanRead")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ProjectSharedToId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SharedLabelId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectSharedToId");

                    b.HasIndex("SharedLabelId");

                    b.ToTable("LabelSharingPolicies");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.LabelsAssignedToDataSetsRelation", b =>
                {
                    b.Property<Guid>("LabelId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DataSetId")
                        .HasColumnType("TEXT");

                    b.HasKey("LabelId", "DataSetId");

                    b.HasIndex("DataSetId");

                    b.ToTable("LabelsAssignedToDataSetsRelation");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.LogSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogContent")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("StoredFileId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("StoredFileId");

                    b.ToTable("LogSection");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.MetadataJsonField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DataSetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataSetId");

                    b.ToTable("MetadataJsonField");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.PipelineInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("LocalId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LocalId");

                    b.ToTable("PipelineInstances");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DefaultDataStoreId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DefaultDataStoreId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11f819a0-6857-4a9f-8a77-caf1a845776e"),
                            Description = "The instances global mockup project.",
                            Name = "_global"
                        });
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.Slug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Slugs");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DataSetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataSetId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.S3DataStore", b =>
                {
                    b.HasBaseType("RDPMS.Core.Persistence.Model.DataStore");

                    b.Property<string>("AccessKeyReference")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bucket")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EndpointUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("KeyPrefix")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecretKeyReference")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UsePathStyle")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.S3FileStorageReference", b =>
                {
                    b.HasBaseType("RDPMS.Core.Persistence.Model.FileStorageReference");

                    b.Property<string>("ObjectKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("TEXT");

                    b.HasIndex("StoreId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.StaticFileStorageReference", b =>
                {
                    b.HasBaseType("RDPMS.Core.Persistence.Model.FileStorageReference");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("DataSetUsedForJobsRelation", b =>
                {
                    b.HasOne("RDPMS.Core.Persistence.Model.DataSet", null)
                        .WithMany()
                        .HasForeignKey("SourceDatasetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RDPMS.Core.Persistence.Model.Job", null)
                        .WithMany()
                        .HasForeignKey("SourceForJobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.ContentType", b =>
                {
                    b.HasOne("RDPMS.Core.Persistence.Model.Project", null)
                        .WithMany("AllFileTypes")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.DataCollectionEntity", b =>
                {
                    b.HasOne("RDPMS.Core.Persistence.Model.DataStore", "DefaultDataStore")
                        .WithMany()
                        .HasForeignKey("DefaultDataStoreId");

                    b.HasOne("RDPMS.Core.Persistence.Model.Project", null)
                        .WithMany("DataCollections")
                        .HasForeignKey("ParentId");

                    b.Navigation("DefaultDataStore");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.DataFile", b =>
                {
                    b.HasOne("RDPMS.Core.Persistence.Model.DataSet", null)
                        .WithMany("Files")
                        .HasForeignKey("DataSetId");

                    b.HasOne("RDPMS.Core.Persistence.Model.DataStore", null)
                        .WithMany("DataFiles")
                        .HasForeignKey("DataStoreId");

                    b.HasOne("RDPMS.Core.Persistence.Model.ContentType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.DataSet", b =>
                {
                    b.HasOne("RDPMS.Core.Persistence.Model.Job", "CreateJob")
                        .WithMany("OutputDatasets")
                        .HasForeignKey("CreateJobId");

                    b.HasOne("RDPMS.Core.Persistence.Model.DataCollectionEntity", null)
                        .WithMany("ContainedDatasets")
                        .HasForeignKey("DataCollectionEntityId");

                    b.Navigation("CreateJob");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.DataStore", b =>
                {
                    b.HasOne("RDPMS.Core.Persistence.Model.Project", null)
                        .WithMany("DataStores")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.FileStorageReference", b =>
                {
                    b.HasOne("RDPMS.Core.Persistence.Model.DataFile", null)
                        .WithMany("Locations")
                        .HasForeignKey("DataFileId");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.Job", b =>
                {
                    b.HasOne("RDPMS.Core.Persistence.Model.DataCollectionEntity", "OutputCollectionEntity")
                        .WithMany()
                        .HasForeignKey("OutputCollectionEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RDPMS.Core.Persistence.Model.DataStore", "OutputDataStore")
                        .WithMany()
                        .HasForeignKey("OutputDataStoreId");

                    b.HasOne("RDPMS.Core.Persistence.Model.PipelineInstance", null)
                        .WithMany("Jobs")
                        .HasForeignKey("PipelineInstanceId");

                    b.Navigation("OutputCollectionEntity");

                    b.Navigation("OutputDataStore");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.Label", b =>
                {
                    b.HasOne("RDPMS.Core.Persistence.Model.Project", "ParentProject")
                        .WithMany("Labels")
                        .HasForeignKey("ParentProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentProject");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.LabelSharingPolicy", b =>
                {
                    b.HasOne("RDPMS.Core.Persistence.Model.Project", "ProjectSharedTo")
                        .WithMany("SharedLabels")
                        .HasForeignKey("ProjectSharedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RDPMS.Core.Persistence.Model.Label", "SharedLabel")
                        .WithMany()
                        .HasForeignKey("SharedLabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectSharedTo");

                    b.Navigation("SharedLabel");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.LabelsAssignedToDataSetsRelation", b =>
                {
                    b.HasOne("RDPMS.Core.Persistence.Model.DataSet", null)
                        .WithMany()
                        .HasForeignKey("DataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RDPMS.Core.Persistence.Model.Label", null)
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.LogSection", b =>
                {
                    b.HasOne("RDPMS.Core.Persistence.Model.Job", null)
                        .WithMany("Logs")
                        .HasForeignKey("JobId");

                    b.HasOne("RDPMS.Core.Persistence.Model.DataFile", "StoredFile")
                        .WithMany()
                        .HasForeignKey("StoredFileId");

                    b.Navigation("StoredFile");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.MetadataJsonField", b =>
                {
                    b.HasOne("RDPMS.Core.Persistence.Model.DataSet", null)
                        .WithMany("MetadataJsonFields")
                        .HasForeignKey("DataSetId");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.Project", b =>
                {
                    b.HasOne("RDPMS.Core.Persistence.Model.DataStore", "DefaultDataStore")
                        .WithMany()
                        .HasForeignKey("DefaultDataStoreId");

                    b.Navigation("DefaultDataStore");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.Tag", b =>
                {
                    b.HasOne("RDPMS.Core.Persistence.Model.DataSet", null)
                        .WithMany("AssignedTags")
                        .HasForeignKey("DataSetId");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.S3FileStorageReference", b =>
                {
                    b.HasOne("RDPMS.Core.Persistence.Model.S3DataStore", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.DataCollectionEntity", b =>
                {
                    b.Navigation("ContainedDatasets");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.DataFile", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.DataSet", b =>
                {
                    b.Navigation("AssignedTags");

                    b.Navigation("Files");

                    b.Navigation("MetadataJsonFields");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.DataStore", b =>
                {
                    b.Navigation("DataFiles");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.Job", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("OutputDatasets");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.PipelineInstance", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("RDPMS.Core.Persistence.Model.Project", b =>
                {
                    b.Navigation("AllFileTypes");

                    b.Navigation("DataCollections");

                    b.Navigation("DataStores");

                    b.Navigation("Labels");

                    b.Navigation("SharedLabels");
                });
#pragma warning restore 612, 618
        }
    }
}
